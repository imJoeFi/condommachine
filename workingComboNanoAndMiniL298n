#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>

#define Password_Length 7
#define Number_of_Passwords 3

char Data[Password_Length];
char Master[Number_of_Passwords][Password_Length] = {
  "123456",
  "456789",
  "789012"
};

bool passwordUsed[Number_of_Passwords] = {false, false, false};

// Motor Control Pins for L298N
const int motorDirPin1 = 2;  // Direction pin 1 connected to IN1
const int motorDirPin2 = 3;  // Direction pin 2 connected to IN2

// Limit Switch Pins
const int switchForward = A2;
const int switchBackward = A3;

bool isForward = false;

const byte ROWS = 4;
const byte COLS = 4;

char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {5, 6, 7, 8};
byte colPins[COLS] = {9, 10, 11, 12};

Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);
LiquidCrystal_I2C lcd(0x27, 16, 2);

char customKey;
byte data_count = 0;

void setup() {
  lcd.backlight();
  lcd.init();

  pinMode(motorDirPin1, OUTPUT);
  pinMode(motorDirPin2, OUTPUT);
  pinMode(switchForward, INPUT_PULLUP);
  pinMode(switchBackward, INPUT_PULLUP);
}

void loop() {
  lcd.setCursor(0, 0);
  lcd.print("Enter Password:");

  customKey = customKeypad.getKey();
  if (customKey) {
    Data[data_count] = customKey;
    lcd.setCursor(data_count, 1);
    lcd.print(Data[data_count]);
    data_count++;
  }

  if (data_count == Password_Length - 1) {
    lcd.clear();

    if (isPasswordCorrect()) {
      lcd.print("Correct");
      runMotor();
    } else {
      lcd.print("Incorrect");
      delay(1000);
    }

    lcd.clear();
    clearData();
  }
}

bool isPasswordCorrect() {
  for (int i = 0; i < Number_of_Passwords; i++) {
    if (!strcmp(Data, Master[i]) && !passwordUsed[i]) {
      passwordUsed[i] = true;
      return true;
    }
  }
  return false;
}

void runMotor() {
  int speed = 150; // Example speed value; can range from 0 to 255

  // Reset direction
  isForward = false;

  // Run motor until a limit switch is triggered
  while (true) {
    if (!isForward) {
      analogWrite(motorDirPin1, speed); // Set speed using PWM
      digitalWrite(motorDirPin2, LOW);
      if (digitalRead(switchBackward) == LOW) {
        isForward = true;
        delay(1);
      }
    } else {
      digitalWrite(motorDirPin1, LOW);
      analogWrite(motorDirPin2, speed); // Set speed using PWM
      if (digitalRead(switchForward) == LOW) {
        stopMotor();
        delay(1);
        break;
      }
    }
  }
}

void stopMotor() {
  digitalWrite(motorDirPin1, LOW);
  digitalWrite(motorDirPin2, LOW);
}

void clearData() {
  while (data_count != 0) {
    Data[data_count--] = 0;
  }
  return;
}
