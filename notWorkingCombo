// Include Arduino Wire library for I2C
#include <Wire.h>
// Include LCD display library for I2C
#include <LiquidCrystal_I2C.h>
// Include Keypad library
#include <Keypad.h>

// Length of password + 1 for null character
#define Password_Length 8
// Character to hold password input
char Data[Password_Length];
// Password
char Master[Password_Length] = "123A456";

// Motor control pins
const int enableA = 10; // PWM pin for motor A speed control (ENA)
const int in1 = 11;     // Motor driver input 1 for motor A
const int in2 = 12;     // Motor driver input 2 for motor A
const int switchForward = 13;  // Limit switch for forward direction
const int switchBackward = A0; // Limit switch for backward direction (using analog pin as digital)
// Pin connected to lock relay input
int lockOutput = 13;

// Counter for character entries
byte data_count = 0;

// Character to hold key input
char customKey;

// Constants for row and column sizes
const byte ROWS = 4;
const byte COLS = 4;

// Array to represent keys on keypad
char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

// Connections to Arduino for keypad (sequential from 2 to 9)
byte rowPins[ROWS] = {2, 3, 4, 5};
byte colPins[COLS] = {6, 7, 8, 9};

// Create keypad object
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

// Create LCD object
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  // Setup LCD with backlight and initialize
  lcd.backlight();
  lcd.init();

  

  // Set motor control pins as OUTPUT
  pinMode(enableA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);

  // Set limit switch pins as INPUT
  pinMode(switchForward, INPUT_PULLUP);
  pinMode(switchBackward, INPUT_PULLUP);
  // Set lockOutput as an OUTPUT pin
  pinMode(lockOutput, OUTPUT);
}

void loop() {
  // Initialize LCD and print
  lcd.setCursor(0, 0);
  lcd.print("Enter Head:");

  // Look for keypress
  customKey = customKeypad.getKey();
  if (customKey) {
    // Enter keypress into array and increment counter
    Data[data_count] = customKey;
    lcd.setCursor(data_count, 1);
    lcd.print(Data[data_count]);
    data_count++;
  }

  // See if we have reached the password length
  if (data_count == Password_Length - 1) {
    lcd.clear();

    if (!strcmp(Data, Master)) {
      // Password is correct
      lcd.print("Correct");
      // Activate motor
      digitalWrite(in1, HIGH);
      digitalWrite(in2, LOW);
      analogWrite(enableA, 150); // Set motor speed

      // Wait until the forward limit switch is activated
      while (digitalRead(switchForward) == HIGH) {
        // Motor running code here
      }

      // Stop the motor when limit switch is activated
      digitalWrite(in1, LOW);
      digitalWrite(in2, LOW);
      analogWrite(enableA, 0);
    }
    else {
      // Password is incorrect
      lcd.print("Incorrect");
      delay(1000);
    }

    // Clear data and LCD display
    lcd.clear();
    clearData();
  }
}

void clearData() {
  // Go through array and clear data
  while (data_count != 0) {
    Data[data_count--] = 0;
  }
  return;
}
